Directory structure of .:
.
├── count_lines.sh
├── gitkeep.sh
├── read-tree.sh
├── readme.md
└── tree.log

1 directory, 5 files

Contents of human-readable files:

--- File: ./.treeignore ---
# Ignore log files
*.log

# Ignore specific files
readme.md

# Ignore temporary or backup files
*.tmp
*.bak

--- File: ./count_lines.sh ---
#!/bin/bash

# Default project directory
PROJECT_DIR="./"

# Default file extensions to include in line count
FILE_EXTENSIONS=("*.c" "*.h" "*.asm" "*.sh" "*.md")

# Function to count lines of code in a specific file type
count_lines_in_files() {
    local extensions=("$@")
    local total_lines=0

    # Loop through each file type and count the lines
    for ext in "${extensions[@]}"; do
        # Use find to get files recursively and count lines
        find "$PROJECT_DIR" -type f -name "$ext" | while read file; do
            lines_in_file=$(wc -l < "$file")
            total_lines=$((total_lines + lines_in_file))
        done
    done

    echo "$total_lines"
}

# Function to display usage/help
show_help() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  -d <directory>    Set the project directory (default: current directory)"
    echo "  -e <extensions>   Comma-separated list of file extensions to include (default: .c,.h,.asm,.sh,.md)"
    echo "  -h                Show this help message"
    exit 1
}

# Parse command-line arguments
while getopts "d:e:h" opt; do
    case "$opt" in
        d)
            PROJECT_DIR="$OPTARG"
            ;;
        e)
            IFS=',' read -r -a FILE_EXTENSIONS <<< "$OPTARG"
            ;;
        h)
            show_help
            ;;
        *)
            show_help
            ;;
    esac
done

# Count the lines and display the result
total_lines=$(count_lines_in_files "${FILE_EXTENSIONS[@]}")
echo "Total lines of code in the project: $total_lines"

--- File: ./gitkeep.sh ---
#!/bin/bash

# Check if the current directory is a Git repository
if [ ! -d ".git" ]; then
    echo "This is not a Git repository!"
    exit 1
fi

# Find all empty directories and add a .gitkeep file
find . -type d -empty -exec touch {}/.gitkeep \;

# Stage the .gitkeep files
git add .gitkeep

echo "Added .gitkeep to empty directories."

--- File: ./read-tree.sh ---
#!/bin/bash

# Ensure required commands are installed
declare -a REQUIRED_COMMANDS=("tree" "file")
for cmd in "${REQUIRED_COMMANDS[@]}"; do
  if ! command -v "$cmd" &> /dev/null; then
    echo "Error: '$cmd' command not found. Please install it first."
    exit 1
  fi
done

# Set the target directory (default to current directory if not provided)
TARGET_DIR=${1:-.}

# Define the log file (always save as tree.log)
LOG_FILE="./tree.log"

# Check if the target directory exists and is accessible
if [ ! -d "$TARGET_DIR" ]; then
  echo "Error: Target directory '$TARGET_DIR' does not exist or is not accessible."
  exit 1
fi

# Load ignore patterns from .treeignore if it exists
IGNORE_FILE="$TARGET_DIR/.treeignore"
IGNORE_PATTERNS=()
if [ -f "$IGNORE_FILE" ]; then
  while read -r line; do
    # Skip empty lines or lines starting with #
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    IGNORE_PATTERNS+=("$line")
  done < "$IGNORE_FILE"
fi

# Construct the ignore string for the tree command
IGNORE_ARGS=""
if [ ${#IGNORE_PATTERNS[@]} -gt 0 ]; then
  IGNORE_ARGS="-I \"$(IFS="|"; echo "${IGNORE_PATTERNS[*]}")\""
fi

# Display the directory structure and write it to the log file
echo "Directory structure of $TARGET_DIR:" > "$LOG_FILE"
eval tree "$TARGET_DIR" $IGNORE_ARGS >> "$LOG_FILE" || {
  echo "Error: Failed to generate directory structure."
  exit 1
}

# Find human-readable files and output their content, excluding ignored files
echo -e "\nContents of human-readable files:" >> "$LOG_FILE"
find "$TARGET_DIR" -type f \( ! -name "$(basename "$LOG_FILE")" \) | grep -v "/\.git/" | while read -r file; do
  # Skip files matching .treeignore patterns
  for pattern in "${IGNORE_PATTERNS[@]}"; do
    [[ "$file" == *"$pattern"* ]] && continue 2
  done

  if file "$file" | grep -q "text"; then
    echo -e "\n--- File: $file ---" >> "$LOG_FILE"
    cat "$file" >> "$LOG_FILE" 2>/dev/null || echo "Error: Unable to read $file" >> "$LOG_FILE"
  fi
done

# Notify the user of the completed log generation
echo "Log file generated: $LOG_FILE"

--- File: ./readme.md ---
# Bash Scripts Project

This directory contains a set of Bash scripts designed for file and directory management, analysis, and logging. Below is an overview of the files and their purposes.

---

## Directory Structure

```
.
├── count_lines.sh   # Script to count lines in specific file types
├── gitkeep.sh       # Script to add .gitkeep to empty directories
├── read-tree.sh     # Script to log directory structure and file contents
├── readme.md        # Documentation for the project
└── tree.log         # Log file generated by read-tree.sh
```

Total: 1 directory, 5 files

---

## Files and Usage

### 1. `count_lines.sh`
- **Purpose**: Counts the number of lines in specified file types.
- **Features**:
  - Supports recursive search.
  - Customizable file extensions and target directory.
- **Usage**:
  ```bash
  ./count_lines.sh [options]
  ```
  Options:
  - `-d <directory>`: Set the target directory (default: current directory).
  - `-e <extensions>`: Comma-separated list of file extensions (default: `.c,.h,.asm,.sh,.md`).
  - `-h`: Display help message.

---

### 2. `gitkeep.sh`
- **Purpose**: Adds `.gitkeep` files to all empty directories in a Git repository.
- **Features**:
  - Ensures empty directories are tracked in Git.
- **Usage**:
  ```bash
  ./gitkeep.sh
  ```
- **Output**: Automatically stages `.gitkeep` files.

---

### 3. `read-tree.sh`
- **Purpose**: Generates a log file (`tree.log`) containing the directory structure and the contents of human-readable files.
- **Features**:
  - Excludes `.git` directories by default.
  - Supports a `.treeignore` file for additional exclusions.
  - Reads human-readable file contents into the log.
- **Usage**:
  ```bash
  ./read-tree.sh [target_directory]
  ```
- **Output**:
  - Logs the directory structure and readable file contents to `tree.log`.

---

### 4. `tree.log`
- **Purpose**: Auto-generated log by `read-tree.sh`.
- **Contents**:
  - Directory structure.
  - Contents of human-readable files, excluding ignored files.

---

## Example `.treeignore` File

To customize excluded files and directories for `read-tree.sh`, create a `.treeignore` file in the target directory. Example:

```plaintext
# Ignore log files
*.log

# Ignore temporary files
*.tmp

# Ignore specific directories
node_modules
build/
```

---

## Prerequisites
- Ensure the following tools are installed:
  - `tree`
  - `file`

---

## License
This project is open-source and licensed under the [MIT License](LICENSE).

---

## Contributions
Contributions are welcome! Please submit issues or pull requests to improve functionality or add new features.